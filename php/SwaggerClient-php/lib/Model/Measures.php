<?php
/**
 * Measures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * The Weather Company PWS API
 *
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (23-06-2020) this document only covers 2 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Measures Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Measures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'measures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dewpt' => 'int',
        'elev' => 'int',
        'heat_index' => 'int',
        'precip_rate' => 'float',
        'precip_total' => 'float',
        'pressure' => 'float',
        'temp' => 'int',
        'wind_chill' => 'int',
        'wind_gust' => 'int',
        'wind_speed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dewpt' => null,
        'elev' => null,
        'heat_index' => null,
        'precip_rate' => null,
        'precip_total' => null,
        'pressure' => 'float',
        'temp' => null,
        'wind_chill' => null,
        'wind_gust' => null,
        'wind_speed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dewpt' => 'dewpt',
        'elev' => 'elev',
        'heat_index' => 'heatIndex',
        'precip_rate' => 'precipRate',
        'precip_total' => 'precipTotal',
        'pressure' => 'pressure',
        'temp' => 'temp',
        'wind_chill' => 'windChill',
        'wind_gust' => 'windGust',
        'wind_speed' => 'windSpeed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dewpt' => 'setDewpt',
        'elev' => 'setElev',
        'heat_index' => 'setHeatIndex',
        'precip_rate' => 'setPrecipRate',
        'precip_total' => 'setPrecipTotal',
        'pressure' => 'setPressure',
        'temp' => 'setTemp',
        'wind_chill' => 'setWindChill',
        'wind_gust' => 'setWindGust',
        'wind_speed' => 'setWindSpeed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dewpt' => 'getDewpt',
        'elev' => 'getElev',
        'heat_index' => 'getHeatIndex',
        'precip_rate' => 'getPrecipRate',
        'precip_total' => 'getPrecipTotal',
        'pressure' => 'getPressure',
        'temp' => 'getTemp',
        'wind_chill' => 'getWindChill',
        'wind_gust' => 'getWindGust',
        'wind_speed' => 'getWindSpeed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dewpt'] = isset($data['dewpt']) ? $data['dewpt'] : null;
        $this->container['elev'] = isset($data['elev']) ? $data['elev'] : null;
        $this->container['heat_index'] = isset($data['heat_index']) ? $data['heat_index'] : null;
        $this->container['precip_rate'] = isset($data['precip_rate']) ? $data['precip_rate'] : null;
        $this->container['precip_total'] = isset($data['precip_total']) ? $data['precip_total'] : null;
        $this->container['pressure'] = isset($data['pressure']) ? $data['pressure'] : null;
        $this->container['temp'] = isset($data['temp']) ? $data['temp'] : null;
        $this->container['wind_chill'] = isset($data['wind_chill']) ? $data['wind_chill'] : null;
        $this->container['wind_gust'] = isset($data['wind_gust']) ? $data['wind_gust'] : null;
        $this->container['wind_speed'] = isset($data['wind_speed']) ? $data['wind_speed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dewpt
     *
     * @return int
     */
    public function getDewpt()
    {
        return $this->container['dewpt'];
    }

    /**
     * Sets dewpt
     *
     * @param int $dewpt dewpt
     *
     * @return $this
     */
    public function setDewpt($dewpt)
    {
        $this->container['dewpt'] = $dewpt;

        return $this;
    }

    /**
     * Gets elev
     *
     * @return int
     */
    public function getElev()
    {
        return $this->container['elev'];
    }

    /**
     * Sets elev
     *
     * @param int $elev elev
     *
     * @return $this
     */
    public function setElev($elev)
    {
        $this->container['elev'] = $elev;

        return $this;
    }

    /**
     * Gets heat_index
     *
     * @return int
     */
    public function getHeatIndex()
    {
        return $this->container['heat_index'];
    }

    /**
     * Sets heat_index
     *
     * @param int $heat_index heat_index
     *
     * @return $this
     */
    public function setHeatIndex($heat_index)
    {
        $this->container['heat_index'] = $heat_index;

        return $this;
    }

    /**
     * Gets precip_rate
     *
     * @return float
     */
    public function getPrecipRate()
    {
        return $this->container['precip_rate'];
    }

    /**
     * Sets precip_rate
     *
     * @param float $precip_rate precip_rate
     *
     * @return $this
     */
    public function setPrecipRate($precip_rate)
    {
        $this->container['precip_rate'] = $precip_rate;

        return $this;
    }

    /**
     * Gets precip_total
     *
     * @return float
     */
    public function getPrecipTotal()
    {
        return $this->container['precip_total'];
    }

    /**
     * Sets precip_total
     *
     * @param float $precip_total precip_total
     *
     * @return $this
     */
    public function setPrecipTotal($precip_total)
    {
        $this->container['precip_total'] = $precip_total;

        return $this;
    }

    /**
     * Gets pressure
     *
     * @return float
     */
    public function getPressure()
    {
        return $this->container['pressure'];
    }

    /**
     * Sets pressure
     *
     * @param float $pressure pressure
     *
     * @return $this
     */
    public function setPressure($pressure)
    {
        $this->container['pressure'] = $pressure;

        return $this;
    }

    /**
     * Gets temp
     *
     * @return int
     */
    public function getTemp()
    {
        return $this->container['temp'];
    }

    /**
     * Sets temp
     *
     * @param int $temp temp
     *
     * @return $this
     */
    public function setTemp($temp)
    {
        $this->container['temp'] = $temp;

        return $this;
    }

    /**
     * Gets wind_chill
     *
     * @return int
     */
    public function getWindChill()
    {
        return $this->container['wind_chill'];
    }

    /**
     * Sets wind_chill
     *
     * @param int $wind_chill wind_chill
     *
     * @return $this
     */
    public function setWindChill($wind_chill)
    {
        $this->container['wind_chill'] = $wind_chill;

        return $this;
    }

    /**
     * Gets wind_gust
     *
     * @return int
     */
    public function getWindGust()
    {
        return $this->container['wind_gust'];
    }

    /**
     * Sets wind_gust
     *
     * @param int $wind_gust wind_gust
     *
     * @return $this
     */
    public function setWindGust($wind_gust)
    {
        $this->container['wind_gust'] = $wind_gust;

        return $this;
    }

    /**
     * Gets wind_speed
     *
     * @return int
     */
    public function getWindSpeed()
    {
        return $this->container['wind_speed'];
    }

    /**
     * Sets wind_speed
     *
     * @param int $wind_speed wind_speed
     *
     * @return $this
     */
    public function setWindSpeed($wind_speed)
    {
        $this->container['wind_speed'] = $wind_speed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



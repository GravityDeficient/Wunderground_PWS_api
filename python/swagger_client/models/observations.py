# coding: utf-8

"""
    The Weather Company PWS API

    APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (23-06-2020) this document only covers 2 availible endpoints in observations domain portfolio.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Observations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'epoch': 'int',
        'humidity': 'int',
        'lat': 'float',
        'lon': 'float',
        'neighborhood': 'str',
        'obs_time_local': 'datetime',
        'obs_time_utc': 'datetime',
        'qc_status': 'int',
        'realtime_frequency': 'int',
        'software_type': 'str',
        'solar_radiation': 'float',
        'station_id': 'str',
        'uv': 'float',
        'winddir': 'int',
        'imperial': 'Measures',
        'metric': 'Measures',
        'metric_si': 'Measures',
        'uk_hybrid': 'Measures'
    }

    attribute_map = {
        'country': 'country',
        'epoch': 'epoch',
        'humidity': 'humidity',
        'lat': 'lat',
        'lon': 'lon',
        'neighborhood': 'neighborhood',
        'obs_time_local': 'obsTimeLocal',
        'obs_time_utc': 'obsTimeUtc',
        'qc_status': 'qcStatus',
        'realtime_frequency': 'realtimeFrequency',
        'software_type': 'softwareType',
        'solar_radiation': 'solarRadiation',
        'station_id': 'stationID',
        'uv': 'uv',
        'winddir': 'winddir',
        'imperial': 'imperial',
        'metric': 'metric',
        'metric_si': 'metric_si',
        'uk_hybrid': 'uk_hybrid'
    }

    def __init__(self, country=None, epoch=None, humidity=None, lat=None, lon=None, neighborhood=None, obs_time_local=None, obs_time_utc=None, qc_status=None, realtime_frequency=None, software_type=None, solar_radiation=None, station_id=None, uv=None, winddir=None, imperial=None, metric=None, metric_si=None, uk_hybrid=None):  # noqa: E501
        """Observations - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._epoch = None
        self._humidity = None
        self._lat = None
        self._lon = None
        self._neighborhood = None
        self._obs_time_local = None
        self._obs_time_utc = None
        self._qc_status = None
        self._realtime_frequency = None
        self._software_type = None
        self._solar_radiation = None
        self._station_id = None
        self._uv = None
        self._winddir = None
        self._imperial = None
        self._metric = None
        self._metric_si = None
        self._uk_hybrid = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if epoch is not None:
            self.epoch = epoch
        if humidity is not None:
            self.humidity = humidity
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if neighborhood is not None:
            self.neighborhood = neighborhood
        if obs_time_local is not None:
            self.obs_time_local = obs_time_local
        if obs_time_utc is not None:
            self.obs_time_utc = obs_time_utc
        if qc_status is not None:
            self.qc_status = qc_status
        if realtime_frequency is not None:
            self.realtime_frequency = realtime_frequency
        if software_type is not None:
            self.software_type = software_type
        if solar_radiation is not None:
            self.solar_radiation = solar_radiation
        if station_id is not None:
            self.station_id = station_id
        if uv is not None:
            self.uv = uv
        if winddir is not None:
            self.winddir = winddir
        if imperial is not None:
            self.imperial = imperial
        if metric is not None:
            self.metric = metric
        if metric_si is not None:
            self.metric_si = metric_si
        if uk_hybrid is not None:
            self.uk_hybrid = uk_hybrid

    @property
    def country(self):
        """Gets the country of this Observations.  # noqa: E501


        :return: The country of this Observations.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Observations.


        :param country: The country of this Observations.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def epoch(self):
        """Gets the epoch of this Observations.  # noqa: E501


        :return: The epoch of this Observations.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this Observations.


        :param epoch: The epoch of this Observations.  # noqa: E501
        :type: int
        """

        self._epoch = epoch

    @property
    def humidity(self):
        """Gets the humidity of this Observations.  # noqa: E501


        :return: The humidity of this Observations.  # noqa: E501
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Observations.


        :param humidity: The humidity of this Observations.  # noqa: E501
        :type: int
        """

        self._humidity = humidity

    @property
    def lat(self):
        """Gets the lat of this Observations.  # noqa: E501


        :return: The lat of this Observations.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Observations.


        :param lat: The lat of this Observations.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Observations.  # noqa: E501


        :return: The lon of this Observations.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Observations.


        :param lon: The lon of this Observations.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def neighborhood(self):
        """Gets the neighborhood of this Observations.  # noqa: E501


        :return: The neighborhood of this Observations.  # noqa: E501
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this Observations.


        :param neighborhood: The neighborhood of this Observations.  # noqa: E501
        :type: str
        """

        self._neighborhood = neighborhood

    @property
    def obs_time_local(self):
        """Gets the obs_time_local of this Observations.  # noqa: E501


        :return: The obs_time_local of this Observations.  # noqa: E501
        :rtype: datetime
        """
        return self._obs_time_local

    @obs_time_local.setter
    def obs_time_local(self, obs_time_local):
        """Sets the obs_time_local of this Observations.


        :param obs_time_local: The obs_time_local of this Observations.  # noqa: E501
        :type: datetime
        """

        self._obs_time_local = obs_time_local

    @property
    def obs_time_utc(self):
        """Gets the obs_time_utc of this Observations.  # noqa: E501


        :return: The obs_time_utc of this Observations.  # noqa: E501
        :rtype: datetime
        """
        return self._obs_time_utc

    @obs_time_utc.setter
    def obs_time_utc(self, obs_time_utc):
        """Sets the obs_time_utc of this Observations.


        :param obs_time_utc: The obs_time_utc of this Observations.  # noqa: E501
        :type: datetime
        """

        self._obs_time_utc = obs_time_utc

    @property
    def qc_status(self):
        """Gets the qc_status of this Observations.  # noqa: E501

        Quality control indicator. -1 = No quality control check performed 0 = This observation was marked as possibly incorrect by our quality control algorithm 1 = This observation passed quality control checks  # noqa: E501

        :return: The qc_status of this Observations.  # noqa: E501
        :rtype: int
        """
        return self._qc_status

    @qc_status.setter
    def qc_status(self, qc_status):
        """Sets the qc_status of this Observations.

        Quality control indicator. -1 = No quality control check performed 0 = This observation was marked as possibly incorrect by our quality control algorithm 1 = This observation passed quality control checks  # noqa: E501

        :param qc_status: The qc_status of this Observations.  # noqa: E501
        :type: int
        """
        if qc_status is not None and qc_status > 1:  # noqa: E501
            raise ValueError("Invalid value for `qc_status`, must be a value less than or equal to `1`")  # noqa: E501
        if qc_status is not None and qc_status < -1:  # noqa: E501
            raise ValueError("Invalid value for `qc_status`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._qc_status = qc_status

    @property
    def realtime_frequency(self):
        """Gets the realtime_frequency of this Observations.  # noqa: E501


        :return: The realtime_frequency of this Observations.  # noqa: E501
        :rtype: int
        """
        return self._realtime_frequency

    @realtime_frequency.setter
    def realtime_frequency(self, realtime_frequency):
        """Sets the realtime_frequency of this Observations.


        :param realtime_frequency: The realtime_frequency of this Observations.  # noqa: E501
        :type: int
        """

        self._realtime_frequency = realtime_frequency

    @property
    def software_type(self):
        """Gets the software_type of this Observations.  # noqa: E501

        Software type of the PWS  # noqa: E501

        :return: The software_type of this Observations.  # noqa: E501
        :rtype: str
        """
        return self._software_type

    @software_type.setter
    def software_type(self, software_type):
        """Sets the software_type of this Observations.

        Software type of the PWS  # noqa: E501

        :param software_type: The software_type of this Observations.  # noqa: E501
        :type: str
        """

        self._software_type = software_type

    @property
    def solar_radiation(self):
        """Gets the solar_radiation of this Observations.  # noqa: E501


        :return: The solar_radiation of this Observations.  # noqa: E501
        :rtype: float
        """
        return self._solar_radiation

    @solar_radiation.setter
    def solar_radiation(self, solar_radiation):
        """Sets the solar_radiation of this Observations.


        :param solar_radiation: The solar_radiation of this Observations.  # noqa: E501
        :type: float
        """

        self._solar_radiation = solar_radiation

    @property
    def station_id(self):
        """Gets the station_id of this Observations.  # noqa: E501


        :return: The station_id of this Observations.  # noqa: E501
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this Observations.


        :param station_id: The station_id of this Observations.  # noqa: E501
        :type: str
        """

        self._station_id = station_id

    @property
    def uv(self):
        """Gets the uv of this Observations.  # noqa: E501


        :return: The uv of this Observations.  # noqa: E501
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this Observations.


        :param uv: The uv of this Observations.  # noqa: E501
        :type: float
        """

        self._uv = uv

    @property
    def winddir(self):
        """Gets the winddir of this Observations.  # noqa: E501


        :return: The winddir of this Observations.  # noqa: E501
        :rtype: int
        """
        return self._winddir

    @winddir.setter
    def winddir(self, winddir):
        """Sets the winddir of this Observations.


        :param winddir: The winddir of this Observations.  # noqa: E501
        :type: int
        """

        self._winddir = winddir

    @property
    def imperial(self):
        """Gets the imperial of this Observations.  # noqa: E501


        :return: The imperial of this Observations.  # noqa: E501
        :rtype: Measures
        """
        return self._imperial

    @imperial.setter
    def imperial(self, imperial):
        """Sets the imperial of this Observations.


        :param imperial: The imperial of this Observations.  # noqa: E501
        :type: Measures
        """

        self._imperial = imperial

    @property
    def metric(self):
        """Gets the metric of this Observations.  # noqa: E501


        :return: The metric of this Observations.  # noqa: E501
        :rtype: Measures
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Observations.


        :param metric: The metric of this Observations.  # noqa: E501
        :type: Measures
        """

        self._metric = metric

    @property
    def metric_si(self):
        """Gets the metric_si of this Observations.  # noqa: E501


        :return: The metric_si of this Observations.  # noqa: E501
        :rtype: Measures
        """
        return self._metric_si

    @metric_si.setter
    def metric_si(self, metric_si):
        """Sets the metric_si of this Observations.


        :param metric_si: The metric_si of this Observations.  # noqa: E501
        :type: Measures
        """

        self._metric_si = metric_si

    @property
    def uk_hybrid(self):
        """Gets the uk_hybrid of this Observations.  # noqa: E501


        :return: The uk_hybrid of this Observations.  # noqa: E501
        :rtype: Measures
        """
        return self._uk_hybrid

    @uk_hybrid.setter
    def uk_hybrid(self, uk_hybrid):
        """Sets the uk_hybrid of this Observations.


        :param uk_hybrid: The uk_hybrid of this Observations.  # noqa: E501
        :type: Measures
        """

        self._uk_hybrid = uk_hybrid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Observations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Observations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

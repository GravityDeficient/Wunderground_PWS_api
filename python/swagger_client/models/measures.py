# coding: utf-8

"""
    The Weather Company PWS API

    APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (23-06-2020) this document only covers 2 availible endpoints in observations domain portfolio.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Measures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dewpt': 'int',
        'elev': 'int',
        'heat_index': 'int',
        'precip_rate': 'float',
        'precip_total': 'float',
        'pressure': 'float',
        'temp': 'int',
        'wind_chill': 'int',
        'wind_gust': 'int',
        'wind_speed': 'int'
    }

    attribute_map = {
        'dewpt': 'dewpt',
        'elev': 'elev',
        'heat_index': 'heatIndex',
        'precip_rate': 'precipRate',
        'precip_total': 'precipTotal',
        'pressure': 'pressure',
        'temp': 'temp',
        'wind_chill': 'windChill',
        'wind_gust': 'windGust',
        'wind_speed': 'windSpeed'
    }

    def __init__(self, dewpt=None, elev=None, heat_index=None, precip_rate=None, precip_total=None, pressure=None, temp=None, wind_chill=None, wind_gust=None, wind_speed=None):  # noqa: E501
        """Measures - a model defined in Swagger"""  # noqa: E501

        self._dewpt = None
        self._elev = None
        self._heat_index = None
        self._precip_rate = None
        self._precip_total = None
        self._pressure = None
        self._temp = None
        self._wind_chill = None
        self._wind_gust = None
        self._wind_speed = None
        self.discriminator = None

        if dewpt is not None:
            self.dewpt = dewpt
        if elev is not None:
            self.elev = elev
        if heat_index is not None:
            self.heat_index = heat_index
        if precip_rate is not None:
            self.precip_rate = precip_rate
        if precip_total is not None:
            self.precip_total = precip_total
        if pressure is not None:
            self.pressure = pressure
        if temp is not None:
            self.temp = temp
        if wind_chill is not None:
            self.wind_chill = wind_chill
        if wind_gust is not None:
            self.wind_gust = wind_gust
        if wind_speed is not None:
            self.wind_speed = wind_speed

    @property
    def dewpt(self):
        """Gets the dewpt of this Measures.  # noqa: E501


        :return: The dewpt of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._dewpt

    @dewpt.setter
    def dewpt(self, dewpt):
        """Sets the dewpt of this Measures.


        :param dewpt: The dewpt of this Measures.  # noqa: E501
        :type: int
        """

        self._dewpt = dewpt

    @property
    def elev(self):
        """Gets the elev of this Measures.  # noqa: E501


        :return: The elev of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._elev

    @elev.setter
    def elev(self, elev):
        """Sets the elev of this Measures.


        :param elev: The elev of this Measures.  # noqa: E501
        :type: int
        """

        self._elev = elev

    @property
    def heat_index(self):
        """Gets the heat_index of this Measures.  # noqa: E501


        :return: The heat_index of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._heat_index

    @heat_index.setter
    def heat_index(self, heat_index):
        """Sets the heat_index of this Measures.


        :param heat_index: The heat_index of this Measures.  # noqa: E501
        :type: int
        """

        self._heat_index = heat_index

    @property
    def precip_rate(self):
        """Gets the precip_rate of this Measures.  # noqa: E501


        :return: The precip_rate of this Measures.  # noqa: E501
        :rtype: float
        """
        return self._precip_rate

    @precip_rate.setter
    def precip_rate(self, precip_rate):
        """Sets the precip_rate of this Measures.


        :param precip_rate: The precip_rate of this Measures.  # noqa: E501
        :type: float
        """

        self._precip_rate = precip_rate

    @property
    def precip_total(self):
        """Gets the precip_total of this Measures.  # noqa: E501


        :return: The precip_total of this Measures.  # noqa: E501
        :rtype: float
        """
        return self._precip_total

    @precip_total.setter
    def precip_total(self, precip_total):
        """Sets the precip_total of this Measures.


        :param precip_total: The precip_total of this Measures.  # noqa: E501
        :type: float
        """

        self._precip_total = precip_total

    @property
    def pressure(self):
        """Gets the pressure of this Measures.  # noqa: E501


        :return: The pressure of this Measures.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this Measures.


        :param pressure: The pressure of this Measures.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def temp(self):
        """Gets the temp of this Measures.  # noqa: E501


        :return: The temp of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this Measures.


        :param temp: The temp of this Measures.  # noqa: E501
        :type: int
        """

        self._temp = temp

    @property
    def wind_chill(self):
        """Gets the wind_chill of this Measures.  # noqa: E501


        :return: The wind_chill of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._wind_chill

    @wind_chill.setter
    def wind_chill(self, wind_chill):
        """Sets the wind_chill of this Measures.


        :param wind_chill: The wind_chill of this Measures.  # noqa: E501
        :type: int
        """

        self._wind_chill = wind_chill

    @property
    def wind_gust(self):
        """Gets the wind_gust of this Measures.  # noqa: E501


        :return: The wind_gust of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._wind_gust

    @wind_gust.setter
    def wind_gust(self, wind_gust):
        """Sets the wind_gust of this Measures.


        :param wind_gust: The wind_gust of this Measures.  # noqa: E501
        :type: int
        """

        self._wind_gust = wind_gust

    @property
    def wind_speed(self):
        """Gets the wind_speed of this Measures.  # noqa: E501


        :return: The wind_speed of this Measures.  # noqa: E501
        :rtype: int
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this Measures.


        :param wind_speed: The wind_speed of this Measures.  # noqa: E501
        :type: int
        """

        self._wind_speed = wind_speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Measures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Measures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

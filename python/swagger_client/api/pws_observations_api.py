# coding: utf-8

"""
    The Weather Company PWS API

    APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (23-06-2020) this document only covers 2 availible endpoints in observations domain portfolio.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PWSObservationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def observations_all_one_day(self, station_id, units, format, **kwargs):  # noqa: E501
        """observations_all_one_day  # noqa: E501

        Personal Weather Station (PWS) Rapid Historical Observations returns the daily observations records in rapid frequency as frequent as every 5 minutes. Actual frequency of reports ranges and is dependent on how frequently an individual Personal Weather Station (PWS) reports data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.observations_all_one_day(station_id, units, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: The PWS station ID (required)
        :param str units: Unit type (required)
        :param str format: (required)
        :param str numeric_precision: Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.observations_all_one_day_with_http_info(station_id, units, format, **kwargs)  # noqa: E501
        else:
            (data) = self.observations_all_one_day_with_http_info(station_id, units, format, **kwargs)  # noqa: E501
            return data

    def observations_all_one_day_with_http_info(self, station_id, units, format, **kwargs):  # noqa: E501
        """observations_all_one_day  # noqa: E501

        Personal Weather Station (PWS) Rapid Historical Observations returns the daily observations records in rapid frequency as frequent as every 5 minutes. Actual frequency of reports ranges and is dependent on how frequently an individual Personal Weather Station (PWS) reports data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.observations_all_one_day_with_http_info(station_id, units, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: The PWS station ID (required)
        :param str units: Unit type (required)
        :param str format: (required)
        :param str numeric_precision: Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'units', 'format', 'numeric_precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method observations_all_one_day" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `observations_all_one_day`")  # noqa: E501
        # verify the required parameter 'units' is set
        if ('units' not in params or
                params['units'] is None):
            raise ValueError("Missing the required parameter `units` when calling `observations_all_one_day`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `observations_all_one_day`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'station_id' in params:
            query_params.append(('stationId', params['station_id']))  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
        if 'numeric_precision' in params:
            query_params.append(('numericPrecision', params['numeric_precision']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/observations/all/1day', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def observations_current(self, station_id, units, format, **kwargs):  # noqa: E501
        """observations_current  # noqa: E501

        Personal Weather Stations (PWS) Current Conditions returns the current conditions observations for the current record.Current record is the last record reported within 60 minutes. If the station has not reported a current conditions in the past 60 minutes, the response will not return an expired observation record (older than 60 minutes); a 'Data Expired' message will be returned instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.observations_current(station_id, units, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: The PWS station ID (required)
        :param str units: Unit type (required)
        :param str format: (required)
        :param str numeric_precision: Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.observations_current_with_http_info(station_id, units, format, **kwargs)  # noqa: E501
        else:
            (data) = self.observations_current_with_http_info(station_id, units, format, **kwargs)  # noqa: E501
            return data

    def observations_current_with_http_info(self, station_id, units, format, **kwargs):  # noqa: E501
        """observations_current  # noqa: E501

        Personal Weather Stations (PWS) Current Conditions returns the current conditions observations for the current record.Current record is the last record reported within 60 minutes. If the station has not reported a current conditions in the past 60 minutes, the response will not return an expired observation record (older than 60 minutes); a 'Data Expired' message will be returned instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.observations_current_with_http_info(station_id, units, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: The PWS station ID (required)
        :param str units: Unit type (required)
        :param str format: (required)
        :param str numeric_precision: Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'units', 'format', 'numeric_precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method observations_current" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `observations_current`")  # noqa: E501
        # verify the required parameter 'units' is set
        if ('units' not in params or
                params['units'] is None):
            raise ValueError("Missing the required parameter `units` when calling `observations_current`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `observations_current`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'station_id' in params:
            query_params.append(('stationId', params['station_id']))  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
        if 'numeric_precision' in params:
            query_params.append(('numericPrecision', params['numeric_precision']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/observations/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

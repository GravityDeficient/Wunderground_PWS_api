/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 4 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheWeatherCompanyPwsApi);
  }
}(this, function(expect, TheWeatherCompanyPwsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Observations', function() {
      beforeEach(function() {
        instance = new TheWeatherCompanyPwsApi.Observations();
      });

      it('should create an instance of Observations', function() {
        // TODO: update the code to test Observations
        expect(instance).to.be.a(TheWeatherCompanyPwsApi.Observations);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property epoch (base name: "epoch")', function() {
        // TODO: update the code to test the property epoch
        expect(instance).to.have.property('epoch');
        // expect(instance.epoch).to.be(expectedValueLiteral);
      });

      it('should have the property humidity (base name: "humidity")', function() {
        // TODO: update the code to test the property humidity
        expect(instance).to.have.property('humidity');
        // expect(instance.humidity).to.be(expectedValueLiteral);
      });

      it('should have the property lat (base name: "lat")', function() {
        // TODO: update the code to test the property lat
        expect(instance).to.have.property('lat');
        // expect(instance.lat).to.be(expectedValueLiteral);
      });

      it('should have the property lon (base name: "lon")', function() {
        // TODO: update the code to test the property lon
        expect(instance).to.have.property('lon');
        // expect(instance.lon).to.be(expectedValueLiteral);
      });

      it('should have the property neighborhood (base name: "neighborhood")', function() {
        // TODO: update the code to test the property neighborhood
        expect(instance).to.have.property('neighborhood');
        // expect(instance.neighborhood).to.be(expectedValueLiteral);
      });

      it('should have the property obsTimeLocal (base name: "obsTimeLocal")', function() {
        // TODO: update the code to test the property obsTimeLocal
        expect(instance).to.have.property('obsTimeLocal');
        // expect(instance.obsTimeLocal).to.be(expectedValueLiteral);
      });

      it('should have the property obsTimeUtc (base name: "obsTimeUtc")', function() {
        // TODO: update the code to test the property obsTimeUtc
        expect(instance).to.have.property('obsTimeUtc');
        // expect(instance.obsTimeUtc).to.be(expectedValueLiteral);
      });

      it('should have the property qcStatus (base name: "qcStatus")', function() {
        // TODO: update the code to test the property qcStatus
        expect(instance).to.have.property('qcStatus');
        // expect(instance.qcStatus).to.be(expectedValueLiteral);
      });

      it('should have the property realtimeFrequency (base name: "realtimeFrequency")', function() {
        // TODO: update the code to test the property realtimeFrequency
        expect(instance).to.have.property('realtimeFrequency');
        // expect(instance.realtimeFrequency).to.be(expectedValueLiteral);
      });

      it('should have the property softwareType (base name: "softwareType")', function() {
        // TODO: update the code to test the property softwareType
        expect(instance).to.have.property('softwareType');
        // expect(instance.softwareType).to.be(expectedValueLiteral);
      });

      it('should have the property solarRadiation (base name: "solarRadiation")', function() {
        // TODO: update the code to test the property solarRadiation
        expect(instance).to.have.property('solarRadiation');
        // expect(instance.solarRadiation).to.be(expectedValueLiteral);
      });

      it('should have the property stationID (base name: "stationID")', function() {
        // TODO: update the code to test the property stationID
        expect(instance).to.have.property('stationID');
        // expect(instance.stationID).to.be(expectedValueLiteral);
      });

      it('should have the property uv (base name: "uv")', function() {
        // TODO: update the code to test the property uv
        expect(instance).to.have.property('uv');
        // expect(instance.uv).to.be(expectedValueLiteral);
      });

      it('should have the property winddir (base name: "winddir")', function() {
        // TODO: update the code to test the property winddir
        expect(instance).to.have.property('winddir');
        // expect(instance.winddir).to.be(expectedValueLiteral);
      });

      it('should have the property imperial (base name: "imperial")', function() {
        // TODO: update the code to test the property imperial
        expect(instance).to.have.property('imperial');
        // expect(instance.imperial).to.be(expectedValueLiteral);
      });

      it('should have the property metric (base name: "metric")', function() {
        // TODO: update the code to test the property metric
        expect(instance).to.have.property('metric');
        // expect(instance.metric).to.be(expectedValueLiteral);
      });

      it('should have the property metricSi (base name: "metric_si")', function() {
        // TODO: update the code to test the property metricSi
        expect(instance).to.have.property('metricSi');
        // expect(instance.metricSi).to.be(expectedValueLiteral);
      });

      it('should have the property ukHybrid (base name: "uk_hybrid")', function() {
        // TODO: update the code to test the property ukHybrid
        expect(instance).to.have.property('ukHybrid');
        // expect(instance.ukHybrid).to.be(expectedValueLiteral);
      });

    });
  });

}));

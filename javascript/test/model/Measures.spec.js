/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 3 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheWeatherCompanyPwsApi);
  }
}(this, function(expect, TheWeatherCompanyPwsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Measures', function() {
      beforeEach(function() {
        instance = new TheWeatherCompanyPwsApi.Measures();
      });

      it('should create an instance of Measures', function() {
        // TODO: update the code to test Measures
        expect(instance).to.be.a(TheWeatherCompanyPwsApi.Measures);
      });

      it('should have the property dewpt (base name: "dewpt")', function() {
        // TODO: update the code to test the property dewpt
        expect(instance).to.have.property('dewpt');
        // expect(instance.dewpt).to.be(expectedValueLiteral);
      });

      it('should have the property elev (base name: "elev")', function() {
        // TODO: update the code to test the property elev
        expect(instance).to.have.property('elev');
        // expect(instance.elev).to.be(expectedValueLiteral);
      });

      it('should have the property heatIndex (base name: "heatIndex")', function() {
        // TODO: update the code to test the property heatIndex
        expect(instance).to.have.property('heatIndex');
        // expect(instance.heatIndex).to.be(expectedValueLiteral);
      });

      it('should have the property precipRate (base name: "precipRate")', function() {
        // TODO: update the code to test the property precipRate
        expect(instance).to.have.property('precipRate');
        // expect(instance.precipRate).to.be(expectedValueLiteral);
      });

      it('should have the property precipTotal (base name: "precipTotal")', function() {
        // TODO: update the code to test the property precipTotal
        expect(instance).to.have.property('precipTotal');
        // expect(instance.precipTotal).to.be(expectedValueLiteral);
      });

      it('should have the property pressure (base name: "pressure")', function() {
        // TODO: update the code to test the property pressure
        expect(instance).to.have.property('pressure');
        // expect(instance.pressure).to.be(expectedValueLiteral);
      });

      it('should have the property temp (base name: "temp")', function() {
        // TODO: update the code to test the property temp
        expect(instance).to.have.property('temp');
        // expect(instance.temp).to.be(expectedValueLiteral);
      });

      it('should have the property windChill (base name: "windChill")', function() {
        // TODO: update the code to test the property windChill
        expect(instance).to.have.property('windChill');
        // expect(instance.windChill).to.be(expectedValueLiteral);
      });

      it('should have the property windGust (base name: "windGust")', function() {
        // TODO: update the code to test the property windGust
        expect(instance).to.have.property('windGust');
        // expect(instance.windGust).to.be(expectedValueLiteral);
      });

      it('should have the property windSpeed (base name: "windSpeed")', function() {
        // TODO: update the code to test the property windSpeed
        expect(instance).to.have.property('windSpeed');
        // expect(instance.windSpeed).to.be(expectedValueLiteral);
      });

    });
  });

}));

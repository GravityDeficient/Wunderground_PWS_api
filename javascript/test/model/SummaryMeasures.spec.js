/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 4 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheWeatherCompanyPwsApi);
  }
}(this, function(expect, TheWeatherCompanyPwsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SummaryMeasures', function() {
      beforeEach(function() {
        instance = new TheWeatherCompanyPwsApi.SummaryMeasures();
      });

      it('should create an instance of SummaryMeasures', function() {
        // TODO: update the code to test SummaryMeasures
        expect(instance).to.be.a(TheWeatherCompanyPwsApi.SummaryMeasures);
      });

      it('should have the property dewptAvg (base name: "dewptAvg")', function() {
        // TODO: update the code to test the property dewptAvg
        expect(instance).to.have.property('dewptAvg');
        // expect(instance.dewptAvg).to.be(expectedValueLiteral);
      });

      it('should have the property dewptHigh (base name: "dewptHigh")', function() {
        // TODO: update the code to test the property dewptHigh
        expect(instance).to.have.property('dewptHigh');
        // expect(instance.dewptHigh).to.be(expectedValueLiteral);
      });

      it('should have the property dewptLow (base name: "dewptLow")', function() {
        // TODO: update the code to test the property dewptLow
        expect(instance).to.have.property('dewptLow');
        // expect(instance.dewptLow).to.be(expectedValueLiteral);
      });

      it('should have the property heatindexAvg (base name: "heatindexAvg")', function() {
        // TODO: update the code to test the property heatindexAvg
        expect(instance).to.have.property('heatindexAvg');
        // expect(instance.heatindexAvg).to.be(expectedValueLiteral);
      });

      it('should have the property heatindexHigh (base name: "heatindexHigh")', function() {
        // TODO: update the code to test the property heatindexHigh
        expect(instance).to.have.property('heatindexHigh');
        // expect(instance.heatindexHigh).to.be(expectedValueLiteral);
      });

      it('should have the property heatindexLow (base name: "heatindexLow")', function() {
        // TODO: update the code to test the property heatindexLow
        expect(instance).to.have.property('heatindexLow');
        // expect(instance.heatindexLow).to.be(expectedValueLiteral);
      });

      it('should have the property precipRate (base name: "precipRate")', function() {
        // TODO: update the code to test the property precipRate
        expect(instance).to.have.property('precipRate');
        // expect(instance.precipRate).to.be(expectedValueLiteral);
      });

      it('should have the property precipTotal (base name: "precipTotal")', function() {
        // TODO: update the code to test the property precipTotal
        expect(instance).to.have.property('precipTotal');
        // expect(instance.precipTotal).to.be(expectedValueLiteral);
      });

      it('should have the property pressureMax (base name: "pressureMax")', function() {
        // TODO: update the code to test the property pressureMax
        expect(instance).to.have.property('pressureMax');
        // expect(instance.pressureMax).to.be(expectedValueLiteral);
      });

      it('should have the property pressureMin (base name: "pressureMin")', function() {
        // TODO: update the code to test the property pressureMin
        expect(instance).to.have.property('pressureMin');
        // expect(instance.pressureMin).to.be(expectedValueLiteral);
      });

      it('should have the property pressureTrend (base name: "pressureTrend")', function() {
        // TODO: update the code to test the property pressureTrend
        expect(instance).to.have.property('pressureTrend');
        // expect(instance.pressureTrend).to.be(expectedValueLiteral);
      });

      it('should have the property tempAvg (base name: "tempAvg")', function() {
        // TODO: update the code to test the property tempAvg
        expect(instance).to.have.property('tempAvg');
        // expect(instance.tempAvg).to.be(expectedValueLiteral);
      });

      it('should have the property tempHigh (base name: "tempHigh")', function() {
        // TODO: update the code to test the property tempHigh
        expect(instance).to.have.property('tempHigh');
        // expect(instance.tempHigh).to.be(expectedValueLiteral);
      });

      it('should have the property tempLow (base name: "tempLow")', function() {
        // TODO: update the code to test the property tempLow
        expect(instance).to.have.property('tempLow');
        // expect(instance.tempLow).to.be(expectedValueLiteral);
      });

      it('should have the property windchillAvg (base name: "windchillAvg")', function() {
        // TODO: update the code to test the property windchillAvg
        expect(instance).to.have.property('windchillAvg');
        // expect(instance.windchillAvg).to.be(expectedValueLiteral);
      });

      it('should have the property windchillHigh (base name: "windchillHigh")', function() {
        // TODO: update the code to test the property windchillHigh
        expect(instance).to.have.property('windchillHigh');
        // expect(instance.windchillHigh).to.be(expectedValueLiteral);
      });

      it('should have the property windchillLow (base name: "windchillLow")', function() {
        // TODO: update the code to test the property windchillLow
        expect(instance).to.have.property('windchillLow');
        // expect(instance.windchillLow).to.be(expectedValueLiteral);
      });

      it('should have the property windgustAvg (base name: "windgustAvg")', function() {
        // TODO: update the code to test the property windgustAvg
        expect(instance).to.have.property('windgustAvg');
        // expect(instance.windgustAvg).to.be(expectedValueLiteral);
      });

      it('should have the property windgustHigh (base name: "windgustHigh")', function() {
        // TODO: update the code to test the property windgustHigh
        expect(instance).to.have.property('windgustHigh');
        // expect(instance.windgustHigh).to.be(expectedValueLiteral);
      });

      it('should have the property windgustLow (base name: "windgustLow")', function() {
        // TODO: update the code to test the property windgustLow
        expect(instance).to.have.property('windgustLow');
        // expect(instance.windgustLow).to.be(expectedValueLiteral);
      });

      it('should have the property windspeedAvg (base name: "windspeedAvg")', function() {
        // TODO: update the code to test the property windspeedAvg
        expect(instance).to.have.property('windspeedAvg');
        // expect(instance.windspeedAvg).to.be(expectedValueLiteral);
      });

      it('should have the property windspeedHigh (base name: "windspeedHigh")', function() {
        // TODO: update the code to test the property windspeedHigh
        expect(instance).to.have.property('windspeedHigh');
        // expect(instance.windspeedHigh).to.be(expectedValueLiteral);
      });

      it('should have the property windspeedLow (base name: "windspeedLow")', function() {
        // TODO: update the code to test the property windspeedLow
        expect(instance).to.have.property('windspeedLow');
        // expect(instance.windspeedLow).to.be(expectedValueLiteral);
      });

    });
  });

}));

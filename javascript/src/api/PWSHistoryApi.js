/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 4 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'));
  } else {
    // Browser globals (root is window)
    if (!root.TheWeatherCompanyPwsApi) {
      root.TheWeatherCompanyPwsApi = {};
    }
    root.TheWeatherCompanyPwsApi.PWSHistoryApi = factory(root.TheWeatherCompanyPwsApi.ApiClient, root.TheWeatherCompanyPwsApi.InlineResponse2001);
  }
}(this, function(ApiClient, InlineResponse2001) {
  'use strict';

  /**
   * PWSHistory service.
   * @module api/PWSHistoryApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PWSHistoryApi. 
   * @alias module:api/PWSHistoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v2PwsHistoryAll operation.
     * @callback module:api/PWSHistoryApi~v2PwsHistoryAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Personal Weather Stations (PWS) Historical Data returns the historical PWS data for a single date, returning hourly data, summary data for the entire day, or both.
     * @param {String} stationId The PWS station ID
     * @param {Number} _date The date parameter is used to call the specific date request, using format “YYYYMMDD”
     * @param {module:model/String} units Unit type
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.numericPrecision Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
     * @param {module:api/PWSHistoryApi~v2PwsHistoryAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.v2PwsHistoryAll = function(stationId, _date, units, format, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling v2PwsHistoryAll");
      }

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling v2PwsHistoryAll");
      }

      // verify the required parameter 'units' is set
      if (units === undefined || units === null) {
        throw new Error("Missing the required parameter 'units' when calling v2PwsHistoryAll");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling v2PwsHistoryAll");
      }


      var pathParams = {
      };
      var queryParams = {
        'stationId': stationId,
        'date': _date,
        'units': units,
        'numericPrecision': opts['numericPrecision'],
        'format': format,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyQueryParam'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v2/pws/history/all', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2PwsHistoryDaily operation.
     * @callback module:api/PWSHistoryApi~v2PwsHistoryDailyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Personal Weather Stations (PWS) Historical Data returns the historical PWS data for a single date, returning summary data for the entire day.
     * @param {String} stationId The PWS station ID
     * @param {Number} _date The date parameter is used to call the specific date request, using format “YYYYMMDD”
     * @param {module:model/String} units Unit type
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.numericPrecision Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
     * @param {module:api/PWSHistoryApi~v2PwsHistoryDailyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.v2PwsHistoryDaily = function(stationId, _date, units, format, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling v2PwsHistoryDaily");
      }

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling v2PwsHistoryDaily");
      }

      // verify the required parameter 'units' is set
      if (units === undefined || units === null) {
        throw new Error("Missing the required parameter 'units' when calling v2PwsHistoryDaily");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling v2PwsHistoryDaily");
      }


      var pathParams = {
      };
      var queryParams = {
        'stationId': stationId,
        'date': _date,
        'units': units,
        'numericPrecision': opts['numericPrecision'],
        'format': format,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyQueryParam'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v2/pws/history/daily', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2PwsHistoryHourly operation.
     * @callback module:api/PWSHistoryApi~v2PwsHistoryHourlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Personal Weather Stations (PWS) Historical Data returns the historical PWS data for a single date, returning hourly data.
     * @param {String} stationId The PWS station ID
     * @param {Number} _date The date parameter is used to call the specific date request, using format “YYYYMMDD”
     * @param {module:model/String} units Unit type
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.numericPrecision Optional parameter.  Set to ‘decimal’ to ensure data is returned in decimal format when needed. Will return integers if this value is not used.
     * @param {module:api/PWSHistoryApi~v2PwsHistoryHourlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.v2PwsHistoryHourly = function(stationId, _date, units, format, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling v2PwsHistoryHourly");
      }

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling v2PwsHistoryHourly");
      }

      // verify the required parameter 'units' is set
      if (units === undefined || units === null) {
        throw new Error("Missing the required parameter 'units' when calling v2PwsHistoryHourly");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling v2PwsHistoryHourly");
      }


      var pathParams = {
      };
      var queryParams = {
        'stationId': stationId,
        'date': _date,
        'units': units,
        'numericPrecision': opts['numericPrecision'],
        'format': format,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyQueryParam'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v2/pws/history/hourly', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

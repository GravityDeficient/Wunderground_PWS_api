/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (23-06-2020) this document only covers 2 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Measures'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Measures'));
  } else {
    // Browser globals (root is window)
    if (!root.TheWeatherCompanyPwsApi) {
      root.TheWeatherCompanyPwsApi = {};
    }
    root.TheWeatherCompanyPwsApi.Observations = factory(root.TheWeatherCompanyPwsApi.ApiClient, root.TheWeatherCompanyPwsApi.Measures);
  }
}(this, function(ApiClient, Measures) {
  'use strict';

  /**
   * The Observations model module.
   * @module model/Observations
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Observations</code>.
   * @alias module:model/Observations
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Observations</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Observations} obj Optional instance to populate.
   * @return {module:model/Observations} The populated <code>Observations</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('epoch'))
        obj.epoch = ApiClient.convertToType(data['epoch'], 'Number');
      if (data.hasOwnProperty('humidity'))
        obj.humidity = ApiClient.convertToType(data['humidity'], 'Number');
      if (data.hasOwnProperty('lat'))
        obj.lat = ApiClient.convertToType(data['lat'], 'Number');
      if (data.hasOwnProperty('lon'))
        obj.lon = ApiClient.convertToType(data['lon'], 'Number');
      if (data.hasOwnProperty('neighborhood'))
        obj.neighborhood = ApiClient.convertToType(data['neighborhood'], 'String');
      if (data.hasOwnProperty('obsTimeLocal'))
        obj.obsTimeLocal = ApiClient.convertToType(data['obsTimeLocal'], 'Date');
      if (data.hasOwnProperty('obsTimeUtc'))
        obj.obsTimeUtc = ApiClient.convertToType(data['obsTimeUtc'], 'Date');
      if (data.hasOwnProperty('qcStatus'))
        obj.qcStatus = ApiClient.convertToType(data['qcStatus'], 'Number');
      if (data.hasOwnProperty('realtimeFrequency'))
        obj.realtimeFrequency = ApiClient.convertToType(data['realtimeFrequency'], 'Number');
      if (data.hasOwnProperty('softwareType'))
        obj.softwareType = ApiClient.convertToType(data['softwareType'], 'String');
      if (data.hasOwnProperty('solarRadiation'))
        obj.solarRadiation = ApiClient.convertToType(data['solarRadiation'], 'Number');
      if (data.hasOwnProperty('stationID'))
        obj.stationID = ApiClient.convertToType(data['stationID'], 'String');
      if (data.hasOwnProperty('uv'))
        obj.uv = ApiClient.convertToType(data['uv'], 'Number');
      if (data.hasOwnProperty('winddir'))
        obj.winddir = ApiClient.convertToType(data['winddir'], 'Number');
      if (data.hasOwnProperty('imperial'))
        obj.imperial = Measures.constructFromObject(data['imperial']);
      if (data.hasOwnProperty('metric'))
        obj.metric = Measures.constructFromObject(data['metric']);
      if (data.hasOwnProperty('metric_si'))
        obj.metricSi = Measures.constructFromObject(data['metric_si']);
      if (data.hasOwnProperty('uk_hybrid'))
        obj.ukHybrid = Measures.constructFromObject(data['uk_hybrid']);
    }
    return obj;
  }

  /**
   * @member {String} country
   */
  exports.prototype.country = undefined;

  /**
   * @member {Number} epoch
   */
  exports.prototype.epoch = undefined;

  /**
   * @member {Number} humidity
   */
  exports.prototype.humidity = undefined;

  /**
   * @member {Number} lat
   */
  exports.prototype.lat = undefined;

  /**
   * @member {Number} lon
   */
  exports.prototype.lon = undefined;

  /**
   * @member {String} neighborhood
   */
  exports.prototype.neighborhood = undefined;

  /**
   * @member {Date} obsTimeLocal
   */
  exports.prototype.obsTimeLocal = undefined;

  /**
   * @member {Date} obsTimeUtc
   */
  exports.prototype.obsTimeUtc = undefined;

  /**
   * Quality control indicator. -1 = No quality control check performed 0 = This observation was marked as possibly incorrect by our quality control algorithm 1 = This observation passed quality control checks
   * @member {Number} qcStatus
   */
  exports.prototype.qcStatus = undefined;

  /**
   * @member {Number} realtimeFrequency
   */
  exports.prototype.realtimeFrequency = undefined;

  /**
   * Software type of the PWS
   * @member {String} softwareType
   */
  exports.prototype.softwareType = undefined;

  /**
   * @member {Number} solarRadiation
   */
  exports.prototype.solarRadiation = undefined;

  /**
   * @member {String} stationID
   */
  exports.prototype.stationID = undefined;

  /**
   * @member {Number} uv
   */
  exports.prototype.uv = undefined;

  /**
   * @member {Number} winddir
   */
  exports.prototype.winddir = undefined;

  /**
   * @member {module:model/Measures} imperial
   */
  exports.prototype.imperial = undefined;

  /**
   * @member {module:model/Measures} metric
   */
  exports.prototype.metric = undefined;

  /**
   * @member {module:model/Measures} metricSi
   */
  exports.prototype.metricSi = undefined;

  /**
   * @member {module:model/Measures} ukHybrid
   */
  exports.prototype.ukHybrid = undefined;

  return exports;

}));

/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 4 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TheWeatherCompanyPwsApi) {
      root.TheWeatherCompanyPwsApi = {};
    }
    root.TheWeatherCompanyPwsApi.SummaryMeasures = factory(root.TheWeatherCompanyPwsApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SummaryMeasures model module.
   * @module model/SummaryMeasures
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>SummaryMeasures</code>.
   * @alias module:model/SummaryMeasures
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SummaryMeasures</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SummaryMeasures} obj Optional instance to populate.
   * @return {module:model/SummaryMeasures} The populated <code>SummaryMeasures</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('dewptAvg'))
        obj.dewptAvg = ApiClient.convertToType(data['dewptAvg'], 'Number');
      if (data.hasOwnProperty('dewptHigh'))
        obj.dewptHigh = ApiClient.convertToType(data['dewptHigh'], 'Number');
      if (data.hasOwnProperty('dewptLow'))
        obj.dewptLow = ApiClient.convertToType(data['dewptLow'], 'Number');
      if (data.hasOwnProperty('heatindexAvg'))
        obj.heatindexAvg = ApiClient.convertToType(data['heatindexAvg'], 'Number');
      if (data.hasOwnProperty('heatindexHigh'))
        obj.heatindexHigh = ApiClient.convertToType(data['heatindexHigh'], 'Number');
      if (data.hasOwnProperty('heatindexLow'))
        obj.heatindexLow = ApiClient.convertToType(data['heatindexLow'], 'Number');
      if (data.hasOwnProperty('precipRate'))
        obj.precipRate = ApiClient.convertToType(data['precipRate'], 'Number');
      if (data.hasOwnProperty('precipTotal'))
        obj.precipTotal = ApiClient.convertToType(data['precipTotal'], 'Number');
      if (data.hasOwnProperty('pressureMax'))
        obj.pressureMax = ApiClient.convertToType(data['pressureMax'], 'Number');
      if (data.hasOwnProperty('pressureMin'))
        obj.pressureMin = ApiClient.convertToType(data['pressureMin'], 'Number');
      if (data.hasOwnProperty('pressureTrend'))
        obj.pressureTrend = ApiClient.convertToType(data['pressureTrend'], 'Number');
      if (data.hasOwnProperty('tempAvg'))
        obj.tempAvg = ApiClient.convertToType(data['tempAvg'], 'Number');
      if (data.hasOwnProperty('tempHigh'))
        obj.tempHigh = ApiClient.convertToType(data['tempHigh'], 'Number');
      if (data.hasOwnProperty('tempLow'))
        obj.tempLow = ApiClient.convertToType(data['tempLow'], 'Number');
      if (data.hasOwnProperty('windchillAvg'))
        obj.windchillAvg = ApiClient.convertToType(data['windchillAvg'], 'Number');
      if (data.hasOwnProperty('windchillHigh'))
        obj.windchillHigh = ApiClient.convertToType(data['windchillHigh'], 'Number');
      if (data.hasOwnProperty('windchillLow'))
        obj.windchillLow = ApiClient.convertToType(data['windchillLow'], 'Number');
      if (data.hasOwnProperty('windgustAvg'))
        obj.windgustAvg = ApiClient.convertToType(data['windgustAvg'], 'Number');
      if (data.hasOwnProperty('windgustHigh'))
        obj.windgustHigh = ApiClient.convertToType(data['windgustHigh'], 'Number');
      if (data.hasOwnProperty('windgustLow'))
        obj.windgustLow = ApiClient.convertToType(data['windgustLow'], 'Number');
      if (data.hasOwnProperty('windspeedAvg'))
        obj.windspeedAvg = ApiClient.convertToType(data['windspeedAvg'], 'Number');
      if (data.hasOwnProperty('windspeedHigh'))
        obj.windspeedHigh = ApiClient.convertToType(data['windspeedHigh'], 'Number');
      if (data.hasOwnProperty('windspeedLow'))
        obj.windspeedLow = ApiClient.convertToType(data['windspeedLow'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Number} dewptAvg
   */
  exports.prototype.dewptAvg = undefined;

  /**
   * @member {Number} dewptHigh
   */
  exports.prototype.dewptHigh = undefined;

  /**
   * @member {Number} dewptLow
   */
  exports.prototype.dewptLow = undefined;

  /**
   * @member {Number} heatindexAvg
   */
  exports.prototype.heatindexAvg = undefined;

  /**
   * @member {Number} heatindexHigh
   */
  exports.prototype.heatindexHigh = undefined;

  /**
   * @member {Number} heatindexLow
   */
  exports.prototype.heatindexLow = undefined;

  /**
   * @member {Number} precipRate
   */
  exports.prototype.precipRate = undefined;

  /**
   * @member {Number} precipTotal
   */
  exports.prototype.precipTotal = undefined;

  /**
   * @member {Number} pressureMax
   */
  exports.prototype.pressureMax = undefined;

  /**
   * @member {Number} pressureMin
   */
  exports.prototype.pressureMin = undefined;

  /**
   * @member {Number} pressureTrend
   */
  exports.prototype.pressureTrend = undefined;

  /**
   * @member {Number} tempAvg
   */
  exports.prototype.tempAvg = undefined;

  /**
   * @member {Number} tempHigh
   */
  exports.prototype.tempHigh = undefined;

  /**
   * @member {Number} tempLow
   */
  exports.prototype.tempLow = undefined;

  /**
   * @member {Number} windchillAvg
   */
  exports.prototype.windchillAvg = undefined;

  /**
   * @member {Number} windchillHigh
   */
  exports.prototype.windchillHigh = undefined;

  /**
   * @member {Number} windchillLow
   */
  exports.prototype.windchillLow = undefined;

  /**
   * @member {Number} windgustAvg
   */
  exports.prototype.windgustAvg = undefined;

  /**
   * @member {Number} windgustHigh
   */
  exports.prototype.windgustHigh = undefined;

  /**
   * @member {Number} windgustLow
   */
  exports.prototype.windgustLow = undefined;

  /**
   * @member {Number} windspeedAvg
   */
  exports.prototype.windspeedAvg = undefined;

  /**
   * @member {Number} windspeedHigh
   */
  exports.prototype.windspeedHigh = undefined;

  /**
   * @member {Number} windspeedLow
   */
  exports.prototype.windspeedLow = undefined;

  return exports;

}));

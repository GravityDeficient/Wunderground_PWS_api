/*
 * The Weather Company PWS API
 * APIs for Personal Weather Station Contributors. This is an unofficial Swagger 2.0 document for working with The Weather Company (Weather Underground) API data. At this time (24-06-2020) this document only covers 4 availible endpoints in observations domain portfolio.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TheWeatherCompanyPwsApi) {
      root.TheWeatherCompanyPwsApi = {};
    }
    root.TheWeatherCompanyPwsApi.Measures = factory(root.TheWeatherCompanyPwsApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Measures model module.
   * @module model/Measures
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Measures</code>.
   * @alias module:model/Measures
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Measures</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Measures} obj Optional instance to populate.
   * @return {module:model/Measures} The populated <code>Measures</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('dewpt'))
        obj.dewpt = ApiClient.convertToType(data['dewpt'], 'Number');
      if (data.hasOwnProperty('elev'))
        obj.elev = ApiClient.convertToType(data['elev'], 'Number');
      if (data.hasOwnProperty('heatIndex'))
        obj.heatIndex = ApiClient.convertToType(data['heatIndex'], 'Number');
      if (data.hasOwnProperty('precipRate'))
        obj.precipRate = ApiClient.convertToType(data['precipRate'], 'Number');
      if (data.hasOwnProperty('precipTotal'))
        obj.precipTotal = ApiClient.convertToType(data['precipTotal'], 'Number');
      if (data.hasOwnProperty('pressure'))
        obj.pressure = ApiClient.convertToType(data['pressure'], 'Number');
      if (data.hasOwnProperty('temp'))
        obj.temp = ApiClient.convertToType(data['temp'], 'Number');
      if (data.hasOwnProperty('windChill'))
        obj.windChill = ApiClient.convertToType(data['windChill'], 'Number');
      if (data.hasOwnProperty('windGust'))
        obj.windGust = ApiClient.convertToType(data['windGust'], 'Number');
      if (data.hasOwnProperty('windSpeed'))
        obj.windSpeed = ApiClient.convertToType(data['windSpeed'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Number} dewpt
   */
  exports.prototype.dewpt = undefined;

  /**
   * @member {Number} elev
   */
  exports.prototype.elev = undefined;

  /**
   * @member {Number} heatIndex
   */
  exports.prototype.heatIndex = undefined;

  /**
   * @member {Number} precipRate
   */
  exports.prototype.precipRate = undefined;

  /**
   * @member {Number} precipTotal
   */
  exports.prototype.precipTotal = undefined;

  /**
   * @member {Number} pressure
   */
  exports.prototype.pressure = undefined;

  /**
   * @member {Number} temp
   */
  exports.prototype.temp = undefined;

  /**
   * @member {Number} windChill
   */
  exports.prototype.windChill = undefined;

  /**
   * @member {Number} windGust
   */
  exports.prototype.windGust = undefined;

  /**
   * @member {Number} windSpeed
   */
  exports.prototype.windSpeed = undefined;

  return exports;

}));
